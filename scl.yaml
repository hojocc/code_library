- name: General
  dir: general/
  files:
    - title: Code library checksum
      fname: checksum.py
    - title: Makefile
      fname: Makefile.txt
    - title: .vimrc
      fname: vimrc.txt
    - title: Stack
      fname: stack.cpp
    - title: Template
      fname: template.cpp
- name: Miscellaneous Algorithms
  dir: misc/
  files:
    - title: 2-SAT
      fname: two-sat.cpp
    - title: Knuth's optimization
      fname: knuth.cpp
    - title: Mo's algorithm
      fname: mo.cpp
      desc: |
        All intervals are closed on both sides. When running functions \lstinline|enter()| and \lstinline|leave()|, the global $l$ and $r$ has not changed yet.
      usage:
        add_query(id, l, r): Add id-th query $[l, r]$.
        run(): Run Mo's algorithm.
        init(): \textbf{TODO}. Initialize the range $[l, r]$.
        yield(id): \textbf{TODO}. Yield answer for id-th query.
        enter(o): \textbf{TODO}. Add o-th element.
        leave(o): \textbf{TODO}. Remove o-th element.
- name: String
  dir: string/
  files:
    - title: Knuth-Morris-Pratt algorithm
      fname: kmp.cpp
    - title: Manacher algorithm
      fname: manacher.cpp
    - title: Aho-corasick automaton
      fname: aho-corasick.cpp
    - title: Suffix array
      fname: sa.cpp
      desc: The character immediately after the end of the string \textbf{MUST} be set to the \textbf{UNIQUE} \textbf{SMALLEST} element.
      usage: 
        s[]: the source string
        sa[i]: the index of starting position of $i$-th suffix
        rk[i]: the number of suffixes less than the suffix starting from $i$
        h[i]: the longest common prefix between the $i$-th and $(i-1)$-th lexicographically smallest suffixes
        n: size of source string
        m: size of character set
    - title: Trie
      fname: trie.cpp
    - title: Rolling hash
      fname: hasher.cpp
      desc: \textbf{PLEASE} call \lstinline|init_hash()| in \lstinline{int main()}!
      usage:
        build(str): Construct the hasher with given string.
        operator()(l, r): Get hash value of substring $[l, r)$.
- name: Math
  dir: math/
  files:
    - title: Matrix powermod
      fname: matrix_powmod.cpp
    - title: Linear basis
      fname: linearbasis.cpp
    - title: Gauss elimination over finite field
      fname: gauss.cpp
    - title: Berlekamp-Massey algorithm
      fname: berlekamp-massey.cpp
    - title: Fast Walsh-Hadamard transform
      fname: fwt.cpp
    - title: Fast fourier transform
      fname: fft.cpp
    - title: Number theoretic transform
      fname: ntt.cpp
    - title: Sieve of Euler 
      fname: euler_sieve.cpp
    - title: Sieve of Euler (General)
      fname: euler_sieve_mult.cpp
    - title: Miller-Rabin primality test
      fname: miller-rabin.cpp
      desc: |
        The array \lstinline|a[]| (excluding senitel, i.e. \lstinline|LLONG_MAX|) should be
        
        \begin{tabular}{p{6cm} p{5cm}}
          \lstinline|{2}| & when $n < 2,047$. \\
          \lstinline|{2, 7, 61}| & when $n < 4,759,123,141$ ($2^{32}$) . \\
          \lstinline|{2, 3, 5, 7, 11}| & when $n < 2.1 \times 10^{12}$. \\
          \lstinline|{2, 325, 9375, 28178, 450775, 9780504, 1795265022}| & when $n < 2^{64}$.
        \end{tabular} 
    - title: Pollard's rho algorithm
      fname: pollard-rho.cpp
    - title: Qusai-polynomial sum
      fname: qpolysum.cpp
      desc: |
        \textbf{Must} call \lstinline|init()| before use!
- name: Graph Theory
  dir: graph/
  files:
    - title: Strongly connected component
      fname: scc.cpp
    - title: Vertex biconnected component
      fname: bcc.cpp
    - title: Minimum spanning arborescence (Chu-Liu)
      fname: mdst.cpp
      desc:  All vertices are 1-based.
      usage: 
        getans(n, root, edges): Compute the total size of MSA rooted at \lstinline|root|.
      time: $O(|V||E|)$ 
    - title: Maximum flow (Dinic)
      fname: dinic.cpp
      usage: 
        add_edge(u, v, c): Add an edge from $u$ to $v$ with capacity $c$.
        max_flow(s, t): Compute maximum flow from $s$ to $t$.
      time:  For general graph, $O(V^2E)$; for network with unit capacity, $O(\min\{V^{2/3}, \sqrt{E}\}E)$; for bipartite network, $O(\sqrt{V}E)$.
    - title: Maximum cardinality bipartite matching (Hungarian)
      fname: hungarian.cpp
    - title: Minimum cost maximum flow
      fname: mcmf.cpp
    - title: Global minimum cut (Stoer-Wagner)
      fname: stoer.cpp
    - title: Fast LCA
      fname: lca.cpp
      desc: All indices of the tree are 1-based.
      usage: 
        preprocess(root): Initialize with tree rooted at \lstinline|root|.
        lca(u, v): Query the lowest common ancestor of $u$ and $v$.
    - title: Heavy-light decomposition
      fname: hldecmp.cpp
      time: The decomposition itself takes linear time. Each query takes $O(\log n)$ operations.
    - title: Centroid decomposition
      fname: centdecomp.cpp
      desc: |
        Note that the centroid here is not the exact centroid of the graph. It only guarantees that the size of each subtree does not exceed half of that of the original tree. This is enough to guarantee the correct time complexity. All vertices are numbered from 1.
        Call \lstinline|decomp(root)| to use.
      usage:
        decomp(u, p): Decompose the tree rooted at $u$ with parent $p$.
      time: The decomposition itself takes $O(n \log n)$ time.
    - title: DSU on tree
      fname: dsu.cpp
      desc: |
        This implementation avoids parallel existence of multiple data structures but requires that the data structure is invertible.
        To use this template, implement \lstinline|merge|, \lstinline|enter|, \lstinline|leave| as needed;
        first call \lstinline|decomp(root, 0)|, then call \lstinline|work(root, 0, false)|. Labels of vertices start from 1.
      usage:
        decomp(u, p): Decompose the tree $u$.
        work(u, p, keep): Work for subtree $u$. When \lstinline|keep| is set, information is not cleared.
      time: $O(n \log n)$ times the complexity for \lstinline|merge|, \lstinline|enter|, \lstinline|leave|.
- name: Data Structures
  dir: ds/
  files:
    - title: Fenwick tree (point update range query)
      fname: bit_purq.cpp
    - title: Fenwick tree (range update point query)
      fname: bit_rupq.cpp
    - title: Segment tree
      fname: segtree.cpp
    - title: Link/cut tree
      fname: lct.cpp
      usage:
        pull(x): Collect information of subtrees.
        Link(u, v): Link two unconnected trees.
        Cut(u, v): Cut an existent edge.
        Query(u, v): Path aggregation.
        Update(u, x): Single point modification.
    - title: Balanced binary search tree from \lstinline|pb_ds|
      fname: ordertree.cpp
    - title: Persistent segment tree, range k-th query
      fname: persistent_segtree.cpp
    - title: Sparse table, range extremum query
      fname: rmq.cpp
      desc: The array is 0-based and the range is closed.
- name: Geometrics
  dir: geo/
  files:
    - title: 2D geometric template
      fname: 2dgeotemp.cpp
- name: Appendices
  dir: appendix/
  files:
    - title: Primes
      fname: primes.tex
    - title: Pell's equation
      fname: pell.tex
    - title: Burnside's lemma and Polya's enumeration theorem
      fname: burnside.tex
    - title: Lagrange's interpolation
      fname: lagrange.tex
